""" ColorX_ui.py --

 UI generated by GUI Builder Build 146 on 2009-06-19 10:55:08 from:
    D:/10/dev/colorx/ColorX.ui
THIS IS AN AUTOGENERATED FILE AND SHOULD NOT BE EDITED.
The associated callback file should be modified instead.
"""

from tkinter import *
from gettext import gettext as _
from ColorX_ui import ColorX

# BEGIN USER CODE global
from colorx_convert import *
from colorx_namer import *
#import tkMessageBox

class CustomColorX(ColorX):
    pass

    # BEGIN CALLBACK CODE
    # ONLY EDIT CODE INSIDE THE def FUNCTIONS.

    # _button_1_command --
    #
    # Callback to handle _button_1 widget option -command
    def _button_1_command(self, *args):

#        tkMessageBox._show("Windows Title","This is the description",icon = tkMessageBox.INFO,type = tkMessageBox.OK)

        new_color = convert_rgb_to_hsv(self._spinbox_1.get(), self._spinbox_2.get(), self._spinbox_3.get())

        self._spinbox_7["values"] = new_color[0]
        self._spinbox_8["values"] = new_color[1]
        self._spinbox_9["values"] = new_color[2]
        self._label_3["bg"] = self._label_1["bg"]
        self._label_3["fg"] = contrast_color(self._label_3["bg"])
        color_name_new = name_select_sql_rgb(self._spinbox_1.get(),  self._spinbox_2.get(),  self._spinbox_3.get())
        self._label_9["text"] =  color_name_new[1]
        self._label_11["text"] =  str(color_name_new[2])
        
        self._label_9["bg"] = '#' + str(color_name_new[0])
        self._label_9["fg"] = contrast_color(self._label_9["bg"])
        self._label_11["bg"] = self._label_9["bg"]
        self._label_11["fg"] = self._label_9["fg"]

    # _button_2_command --
    #
    # Callback to handle _button_2 widget option -command
    def _button_2_command(self, *args):
        new_color = convert_rgb_to_hsv(self._spinbox_4.get(), self._spinbox_5.get(), self._spinbox_6.get())
        self._spinbox_10["values"] = new_color[0]
        self._spinbox_11["values"] = new_color[1]
        self._spinbox_12["values"] = new_color[2]
        self._label_4["bg"] = self._label_2["bg"]
        self._label_4["fg"] = contrast_color(self._label_4["bg"])
        color_name_new = name_select_sql_rgb(self._spinbox_4.get(),  self._spinbox_5.get(),  self._spinbox_6.get())
        self._label_10["text"] =  color_name_new[1]
        self._label_12["text"] =  str(color_name_new[2])
        
        self._label_10["bg"] = '#' + str(color_name_new[0])
        self._label_10["fg"] = contrast_color(self._label_10["bg"])
        self._label_12["bg"] = self._label_10["bg"]
        self._label_12["fg"] = self._label_10["fg"]

    # _button_3_command --
    #
    # Callback to handle _button_3 widget option -command
    def _button_3_command(self, *args):
        new_color = convert_hsv_to_rgb(self._spinbox_7.get(), self._spinbox_8.get(), self._spinbox_9.get())
        self._spinbox_1["values"] = new_color[0]
        self._spinbox_2["values"] = new_color[1]
        self._spinbox_3["values"] = new_color[2]
        self._label_1["bg"] = self._label_3["bg"]
        self._label_1["fg"] = contrast_color(self._label_1["bg"])
        color_name_new = name_select_sql_rgb(new_color[0], new_color[1], new_color[2])
        self._label_11["text"] =  color_name_new[1]
        self._label_9["text"] =  str(color_name_new[2])
        self._label_11["bg"] = '#' + str(color_name_new[0])
        self._label_11["fg"] = contrast_color(self._label_11["bg"])
        self._label_9["bg"] = self._label_11["bg"]
        self._label_9["fg"] = self._label_11["fg"]

    # _button_4_command --
    #
    # Callback to handle _button_4 widget option -command
    def _button_4_command(self, *args):
        new_color = convert_hsv_to_rgb(self._spinbox_10.get(), self._spinbox_11.get(), self._spinbox_12.get())
        self._spinbox_4["values"] = new_color[0]
        self._spinbox_5["values"] = new_color[1]
        self._spinbox_6["values"] = new_color[2]
        self._label_2["bg"] = self._label_4["bg"]
        self._label_2["fg"] = contrast_color(self._label_2["bg"])
        color_name_new = name_select_sql_rgb(new_color[0], new_color[1], new_color[2])
        self._label_10["text"] =  color_name_new[1]
        self._label_12["text"] =  str(color_name_new[2])
        self._label_10["bg"] = '#' + str(color_name_new[0])
        self._label_10["fg"] = contrast_color(self._label_10["bg"])
        self._label_12["bg"] = self._label_10["bg"]
        self._label_12["fg"] = self._label_10["fg"]

    # _button_5_command --
    #
    # Callback to handle _button_5 widget option -command
    def _button_5_command(self, *args):
        mixed_color = mix_colors(self._spinbox_1.get(), self._spinbox_2.get(), self._spinbox_3.get() , self._spinbox_4.get(), self._spinbox_5.get(), self._spinbox_6.get())
        self._spinbox_13["values"] = mixed_color[0]
        self._spinbox_14["values"] = mixed_color[1]
        self._spinbox_15["values"] = mixed_color[2]
        self._label_5["bg"] = rgb_color_to_hex(mixed_color[0], mixed_color[1], mixed_color[2])
        self._label_5["fg"] = contrast_color(self._label_5["bg"])
        color_name_new = name_select_sql_rgb(mixed_color[0],  mixed_color[1],  mixed_color[2])
        self._label_7["text"] =  color_name_new[1] + "\n\n" + str(color_name_new[2])
        self._label_7["bg"] = '#' + str(color_name_new[0])
        self._label_7["fg"] = contrast_color(self._label_7["bg"])

    # _button_6_command --
    #
    # Callback to handle _button_6 widget option -command
    def _button_6_command(self, *args):
        mixed_color = mix_hsv_colors(self._spinbox_7.get(), self._spinbox_8.get(), self._spinbox_9.get() , self._spinbox_10.get(), self._spinbox_11.get(), self._spinbox_12.get())
        self._spinbox_16["values"] = mixed_color[0]
        self._spinbox_17["values"] = mixed_color[1]
        self._spinbox_18["values"] = mixed_color[2]
        new_rgb_color = convert_hsv_to_rgb(mixed_color[0], mixed_color[1], mixed_color[2])
        self._label_6["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_6["fg"] = contrast_color(self._label_6["bg"])
        color_name_new = name_select_sql_rgb(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_8["text"] =  color_name_new[1] + "\n\n" + str(color_name_new[2])
        self._label_8["bg"] = '#' + str(color_name_new[0])
        self._label_8["fg"] = contrast_color(self._label_8["bg"])

    # _button_7_command --
    #
    # Callback to handle _button_7 widget option -command
    def _button_7_command(self, *args):
        mixed_color = mix_cmyk_colors(self._spinbox_19.get(), self._spinbox_20.get(), self._spinbox_21.get() , self._spinbox_22.get(), self._spinbox_23.get(), self._spinbox_24.get(), self._spinbox_25.get(), self._spinbox_26.get())
        self._spinbox_27["values"] = mixed_color[0]
        self._spinbox_28["values"] = mixed_color[1]
        self._spinbox_29["values"] = mixed_color[2]
        self._spinbox_30["values"] = mixed_color[3]
        new_rgb_color = convert_cmyk_to_rgb(mixed_color[0], mixed_color[1], mixed_color[2], mixed_color[3])
        self._label_18["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_18["fg"] = contrast_color(self._label_18["bg"])
        color_name_new = name_select_sql_rgb(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_17["text"] =  color_name_new[1] + "\n\n" + str(color_name_new[2])
        self._label_17["bg"] = '#' + str(color_name_new[0])
        self._label_17["fg"] = contrast_color(self._label_17["bg"])

    # _button_9_command --
    #
    # Callback to handle _button_9 widget option -command
    def _button_9_command(self, *args):
        new_color = convert_rgb_to_cmyk(self._spinbox_1.get(), self._spinbox_2.get(), self._spinbox_3.get())
        self._spinbox_19["values"] = new_color[0]
        self._spinbox_20["values"] = new_color[1]
        self._spinbox_21["values"] = new_color[2]
        self._spinbox_22["values"] = new_color[3]
        new_rgb_color = convert_cmyk_to_rgb(new_color[0], new_color[1], new_color[2], new_color[3])
        self._label_14["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_14["fg"] = contrast_color(self._label_14["bg"])
        color_name_new = name_select_sql_rgb(self._spinbox_1.get(),  self._spinbox_2.get(),  self._spinbox_3.get())
        self._label_9["text"] =  color_name_new[1]
        self._label_13["text"] =  str(color_name_new[2])
        self._label_9["bg"] = '#' + str(color_name_new[0])
        self._label_9["fg"] = contrast_color(self._label_9["bg"])
        self._label_13["bg"] = self._label_9["bg"]
        self._label_13["fg"] = self._label_9["fg"]

    # _button_10_command --
    #
    # Callback to handle _button_10 widget option -command
    def _button_10_command(self, *args):
        new_color = convert_rgb_to_cmyk(self._spinbox_4.get(), self._spinbox_5.get(), self._spinbox_6.get())
        self._spinbox_23["values"] = new_color[0]
        self._spinbox_24["values"] = new_color[1]
        self._spinbox_25["values"] = new_color[2]
        self._spinbox_26["values"] = new_color[3]
        new_rgb_color = convert_cmyk_to_rgb(new_color[0], new_color[1], new_color[2], new_color[3])
        self._label_16["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_16["fg"] = contrast_color(self._label_16["bg"])
        color_name_new = name_select_sql_rgb(self._spinbox_4.get(),  self._spinbox_5.get(),  self._spinbox_6.get())
        self._label_10["text"] =  color_name_new[1]
        self._label_15["text"] =  str(color_name_new[2])
        self._label_10["bg"] = '#' + str(color_name_new[0])
        self._label_10["fg"] = contrast_color(self._label_10["bg"])
        self._label_15["bg"] = self._label_10["bg"]
        self._label_15["fg"] = self._label_10["fg"]

    # _button_11_command --
    #
    # Callback to handle _button_11 widget option -command
    def _button_11_command(self, *args):
        new_color = convert_hsv_to_cmyk(self._spinbox_7.get(), self._spinbox_8.get(), self._spinbox_9.get())
        self._spinbox_19["values"] = new_color[0]
        self._spinbox_20["values"] = new_color[1]
        self._spinbox_21["values"] = new_color[2]
        self._spinbox_22["values"] = new_color[3]
        new_rgb_color = convert_cmyk_to_rgb(new_color[0], new_color[1], new_color[2], new_color[3])
        self._label_14["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_14["fg"] = contrast_color(self._label_14["bg"])
        color_name_new = name_select_sql_rgb(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_11["text"] =  color_name_new[1]
        self._label_13["text"] =  str(color_name_new[2])
        self._label_11["bg"] = '#' + str(color_name_new[0])
        self._label_11["fg"] = contrast_color(self._label_11["bg"])
        self._label_13["bg"] = self._label_11["bg"]
        self._label_13["fg"] = self._label_11["fg"]

    # _button_12_command --
    #
    # Callback to handle _button_12 widget option -command
    def _button_12_command(self, *args):
        new_color = convert_hsv_to_cmyk(self._spinbox_10.get(), self._spinbox_11.get(), self._spinbox_12.get())
        self._spinbox_23["values"] = new_color[0]
        self._spinbox_24["values"] = new_color[1]
        self._spinbox_25["values"] = new_color[2]
        self._spinbox_26["values"] = new_color[3]
        new_rgb_color = convert_cmyk_to_rgb(new_color[0], new_color[1], new_color[2], new_color[3])
        self._label_16["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_16["fg"] = contrast_color(self._label_16["bg"])
        color_name_new = name_select_sql_rgb(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_12["text"] =  color_name_new[1]
        self._label_15["text"] =  str(color_name_new[2])
        self._label_12["bg"] = '#' + str(color_name_new[0])
        self._label_12["fg"] = contrast_color(self._label_12["bg"])
        self._label_15["bg"] = self._label_12["bg"]
        self._label_15["fg"] = self._label_12["fg"]

    # _button_13_command --
    #
    # Callback to handle _button_13 widget option -command
    def _button_13_command(self, *args):
        new_color = convert_cmyk_to_hsv(self._spinbox_19.get(), self._spinbox_20.get(), self._spinbox_21.get(), self._spinbox_22.get())
        self._spinbox_7["values"] = new_color[0]
        self._spinbox_8["values"] = new_color[1]
        self._spinbox_9["values"] = new_color[2]
        new_rgb_color = convert_hsv_to_rgb(new_color[0], new_color[1], new_color[2])
        self._label_3["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_3["fg"] = contrast_color(self._label_3["bg"])
        color_name_new = name_select_sql_rgb(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_13["text"] =  color_name_new[1]
        self._label_11["text"] =  str(color_name_new[2])
        self._label_13["bg"] = '#' + str(color_name_new[0])
        self._label_13["fg"] = contrast_color(self._label_13["bg"])
        self._label_11["bg"] = self._label_13["bg"]
        self._label_11["fg"] = self._label_13["fg"]

    # _button_14_command --
    #
    # Callback to handle _button_14 widget option -command
    def _button_14_command(self, *args):
        new_color = convert_cmyk_to_rgb(self._spinbox_19.get(), self._spinbox_20.get(), self._spinbox_21.get(), self._spinbox_22.get())
        self._spinbox_1["values"] = new_color[0]
        self._spinbox_2["values"] = new_color[1]
        self._spinbox_3["values"] = new_color[2]
        self._label_1["bg"] = rgb_color_to_hex(new_color[0], new_color[1], new_color[2])
        self._label_1["fg"] = contrast_color(self._label_1["bg"])
        color_name_new = name_select_sql_rgb(new_color[0], new_color[1], new_color[2])
        self._label_13["text"] =  color_name_new[1]
        self._label_9["text"] =  str(color_name_new[2])
        self._label_13["bg"] = '#' + str(color_name_new[0])
        self._label_13["fg"] = contrast_color(self._label_13["bg"])
        self._label_9["bg"] = self._label_13["bg"]
        self._label_9["fg"] = self._label_13["fg"]

    # _button_15_command --
    #
    # Callback to handle _button_15 widget option -command
    def _button_15_command(self, *args):
        new_color = convert_cmyk_to_hsv(self._spinbox_23.get(), self._spinbox_24.get(), self._spinbox_25.get(), self._spinbox_26.get())
        self._spinbox_10["values"] = new_color[0]
        self._spinbox_11["values"] = new_color[1]
        self._spinbox_12["values"] = new_color[2]
        new_rgb_color = convert_hsv_to_rgb(new_color[0], new_color[1], new_color[2])
        self._label_4["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_4["fg"] = contrast_color(self._label_4["bg"])
        color_name_new = name_select_sql_rgb(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_15["text"] =  color_name_new[1]
        self._label_12["text"] =  str(color_name_new[2])
        self._label_15["bg"] = '#' + str(color_name_new[0])
        self._label_15["fg"] = contrast_color(self._label_15["bg"])
        self._label_12["bg"] = self._label_15["bg"]
        self._label_12["fg"] = self._label_15["fg"]

    # _button_16_command --
    #
    # Callback to handle _button_16 widget option -command
    def _button_16_command(self, *args):
        new_color = convert_cmyk_to_rgb(self._spinbox_23.get(), self._spinbox_24.get(), self._spinbox_25.get(), self._spinbox_26.get())
        self._spinbox_4["values"] = new_color[0]
        self._spinbox_5["values"] = new_color[1]
        self._spinbox_6["values"] = new_color[2]
        self._label_2["bg"] = rgb_color_to_hex(new_color[0], new_color[1], new_color[2])
        self._label_2["fg"] = contrast_color(self._label_2["bg"])
        color_name_new = name_select_sql_rgb(new_color[0], new_color[1], new_color[2])
        self._label_15["text"] =  color_name_new[1]
        self._label_10["text"] =  str(color_name_new[2])
        self._label_15["bg"] = '#' + str(color_name_new[0])
        self._label_15["fg"] = contrast_color(self._label_15["bg"])
        self._label_10["bg"] = self._label_15["bg"]
        self._label_10["fg"] = self._label_15["fg"]

    # _spinbox_1_command --
    #
    # Callback to handle _spinbox_1 widget option -command
    def _spinbox_1_command(self, *args):
        pass

    # _spinbox_1_invalidcommand --
    #
    # Callback to handle _spinbox_1 widget option -invalidcommand
    def _spinbox_1_invalidcommand(self, *args):
        pass

    # _spinbox_1_validatecommand --
    #
    # Callback to handle _spinbox_1 widget option -validatecommand
    def _spinbox_1_validatecommand(self, *args):
        pass

    # _spinbox_1_xscrollcommand --
    #
    # Callback to handle _spinbox_1 widget option -xscrollcommand
    def _spinbox_1_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_1.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_1["values"] = new_col
        self._label_1["bg"] = rgb_color_to_hex(int(self._spinbox_1.get()), int(self._spinbox_2.get()), int(self._spinbox_3.get()))
        self._label_1["fg"] = contrast_color(self._label_1["bg"])

    # _spinbox_2_command --
    #
    # Callback to handle _spinbox_2 widget option -command
    def _spinbox_2_command(self, *args):
        pass

    # _spinbox_2_invalidcommand --
    #
    # Callback to handle _spinbox_2 widget option -invalidcommand
    def _spinbox_2_invalidcommand(self, *args):
        pass

    # _spinbox_2_validatecommand --
    #
    # Callback to handle _spinbox_2 widget option -validatecommand
    def _spinbox_2_validatecommand(self, *args):
        pass

    # _spinbox_2_xscrollcommand --
    #
    # Callback to handle _spinbox_2 widget option -xscrollcommand
    def _spinbox_2_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_2.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_2["values"] = new_col
        self._label_1["bg"] = rgb_color_to_hex(int(self._spinbox_1.get()), int(self._spinbox_2.get()), int(self._spinbox_3.get()))
        self._label_1["fg"] = contrast_color(self._label_1["bg"])

    # _spinbox_3_command --
    #
    # Callback to handle _spinbox_3 widget option -command
    def _spinbox_3_command(self, *args):
        pass

    # _spinbox_3_invalidcommand --
    #
    # Callback to handle _spinbox_3 widget option -invalidcommand
    def _spinbox_3_invalidcommand(self, *args):
        pass

    # _spinbox_3_validatecommand --
    #
    # Callback to handle _spinbox_3 widget option -validatecommand
    def _spinbox_3_validatecommand(self, *args):
        pass

    # _spinbox_3_xscrollcommand --
    #
    # Callback to handle _spinbox_3 widget option -xscrollcommand
    def _spinbox_3_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_3.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_3["values"] = new_col
        self._label_1["bg"] = rgb_color_to_hex(int(self._spinbox_1.get()), int(self._spinbox_2.get()), int(self._spinbox_3.get()))
        self._label_1["fg"] = contrast_color(self._label_1["bg"])

    # _spinbox_4_command --
    #
    # Callback to handle _spinbox_4 widget option -command
    def _spinbox_4_command(self, *args):
        pass

    # _spinbox_4_invalidcommand --
    #
    # Callback to handle _spinbox_4 widget option -invalidcommand
    def _spinbox_4_invalidcommand(self, *args):
        pass

    # _spinbox_4_validatecommand --
    #
    # Callback to handle _spinbox_4 widget option -validatecommand
    def _spinbox_4_validatecommand(self, *args):
        pass

    # _spinbox_4_xscrollcommand --
    #
    # Callback to handle _spinbox_4 widget option -xscrollcommand
    def _spinbox_4_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_4.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_4["values"] = new_col
        self._label_2["bg"] = rgb_color_to_hex(int(self._spinbox_4.get()), int(self._spinbox_5.get()), int(self._spinbox_6.get()))
        self._label_2["fg"] = contrast_color(self._label_2["bg"])

    # _spinbox_5_command --
    #
    # Callback to handle _spinbox_5 widget option -command
    def _spinbox_5_command(self, *args):
        pass

    # _spinbox_5_invalidcommand --
    #
    # Callback to handle _spinbox_5 widget option -invalidcommand
    def _spinbox_5_invalidcommand(self, *args):
        pass

    # _spinbox_5_validatecommand --
    #
    # Callback to handle _spinbox_5 widget option -validatecommand
    def _spinbox_5_validatecommand(self, *args):
        pass

    # _spinbox_5_xscrollcommand --
    #
    # Callback to handle _spinbox_5 widget option -xscrollcommand
    def _spinbox_5_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_5.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_5["values"] = new_col
        self._label_2["bg"] = rgb_color_to_hex(int(self._spinbox_4.get()), int(self._spinbox_5.get()), int(self._spinbox_6.get()))
        self._label_2["fg"] = contrast_color(self._label_2["bg"])

    # _spinbox_6_command --
    #
    # Callback to handle _spinbox_6 widget option -command
    def _spinbox_6_command(self, *args):
        pass

    # _spinbox_6_invalidcommand --
    #
    # Callback to handle _spinbox_6 widget option -invalidcommand
    def _spinbox_6_invalidcommand(self, *args):
        pass

    # _spinbox_6_validatecommand --
    #
    # Callback to handle _spinbox_6 widget option -validatecommand
    def _spinbox_6_validatecommand(self, *args):
        pass

    # _spinbox_6_xscrollcommand --
    #
    # Callback to handle _spinbox_6 widget option -xscrollcommand
    def _spinbox_6_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_6.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_6["values"] = new_col
        self._label_2["bg"] = rgb_color_to_hex(int(self._spinbox_4.get()), int(self._spinbox_5.get()), int(self._spinbox_6.get()))
        self._label_2["fg"] = contrast_color(self._label_2["bg"])

    # _spinbox_7_command --
    #
    # Callback to handle _spinbox_7 widget option -command
    def _spinbox_7_command(self, *args):
        pass

    # _spinbox_7_invalidcommand --
    #
    # Callback to handle _spinbox_7 widget option -invalidcommand
    def _spinbox_7_invalidcommand(self, *args):
        pass

    # _spinbox_7_validatecommand --
    #
    # Callback to handle _spinbox_7 widget option -validatecommand
    def _spinbox_7_validatecommand(self, *args):
        pass

    # _spinbox_7_xscrollcommand --
    #
    # Callback to handle _spinbox_7 widget option -xscrollcommand
    def _spinbox_7_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_7.get(),0,359)
        if  (new_col == -1) == False:
            self._spinbox_7["values"] = new_col
        new_rgb_color = convert_hsv_to_rgb(int(self._spinbox_7.get()), int(self._spinbox_8.get()), int(self._spinbox_9.get()))
        #print new_rgb_color
        self._label_3["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_3["fg"] = contrast_color(self._label_3["bg"])

    # _spinbox_8_command --
    #
    # Callback to handle _spinbox_8 widget option -command
    def _spinbox_8_command(self, *args):
        pass

    # _spinbox_8_invalidcommand --
    #
    # Callback to handle _spinbox_8 widget option -invalidcommand
    def _spinbox_8_invalidcommand(self, *args):
        pass

    # _spinbox_8_validatecommand --
    #
    # Callback to handle _spinbox_8 widget option -validatecommand
    def _spinbox_8_validatecommand(self, *args):
        pass

    # _spinbox_8_xscrollcommand --
    #
    # Callback to handle _spinbox_8 widget option -xscrollcommand
    def _spinbox_8_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_8.get(),0,100)
        if  (new_col == -1) == False:
            self._spinbox_8["values"] = new_col
        new_rgb_color = convert_hsv_to_rgb(int(self._spinbox_7.get()), int(self._spinbox_8.get()), int(self._spinbox_9.get()))
        #print new_rgb_color
        self._label_3["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_3["fg"] = contrast_color(self._label_3["bg"])

    # _spinbox_9_command --
    #
    # Callback to handle _spinbox_9 widget option -command
    def _spinbox_9_command(self, *args):
        pass

    # _spinbox_9_invalidcommand --
    #
    # Callback to handle _spinbox_9 widget option -invalidcommand
    def _spinbox_9_invalidcommand(self, *args):
        pass

    # _spinbox_9_validatecommand --
    #
    # Callback to handle _spinbox_9 widget option -validatecommand
    def _spinbox_9_validatecommand(self, *args):
        pass

    # _spinbox_9_xscrollcommand --
    #
    # Callback to handle _spinbox_9 widget option -xscrollcommand
    def _spinbox_9_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_9.get(),0,100)
        if  (new_col == -1) == False:
            self._spinbox_9["values"] = new_col
        new_rgb_color = convert_hsv_to_rgb(int(self._spinbox_7.get()), int(self._spinbox_8.get()), int(self._spinbox_9.get()))
        #print new_rgb_color
        self._label_3["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_3["fg"] = contrast_color(self._label_3["bg"])

    # _spinbox_10_command --
    #
    # Callback to handle _spinbox_10 widget option -command
    def _spinbox_10_command(self, *args):
        pass

    # _spinbox_10_invalidcommand --
    #
    # Callback to handle _spinbox_10 widget option -invalidcommand
    def _spinbox_10_invalidcommand(self, *args):
        pass

    # _spinbox_10_validatecommand --
    #
    # Callback to handle _spinbox_10 widget option -validatecommand
    def _spinbox_10_validatecommand(self, *args):
        pass

    # _spinbox_10_xscrollcommand --
    #
    # Callback to handle _spinbox_10 widget option -xscrollcommand
    def _spinbox_10_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_10.get(),0,359)
        if  (new_col == -1) == False:
            self._spinbox_10["values"] = new_col
        new_rgb_color = convert_hsv_to_rgb(int(self._spinbox_10.get()), int(self._spinbox_11.get()), int(self._spinbox_12.get()))
        #print new_rgb_color
        self._label_4["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_4["fg"] = contrast_color(self._label_4["bg"])

    # _spinbox_11_command --
    #
    # Callback to handle _spinbox_11 widget option -command
    def _spinbox_11_command(self, *args):
        pass

    # _spinbox_11_invalidcommand --
    #
    # Callback to handle _spinbox_11 widget option -invalidcommand
    def _spinbox_11_invalidcommand(self, *args):
        pass

    # _spinbox_11_validatecommand --
    #
    # Callback to handle _spinbox_11 widget option -validatecommand
    def _spinbox_11_validatecommand(self, *args):
        pass

    # _spinbox_11_xscrollcommand --
    #
    # Callback to handle _spinbox_11 widget option -xscrollcommand
    def _spinbox_11_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_11.get(),0,100)
        if  (new_col == -1) == False:
            self._spinbox_11["values"] = new_col
        new_rgb_color = convert_hsv_to_rgb(int(self._spinbox_10.get()), int(self._spinbox_11.get()), int(self._spinbox_12.get()))
        #print new_rgb_color
        self._label_4["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_4["fg"] = contrast_color(self._label_4["bg"])

    # _spinbox_12_command --
    #
    # Callback to handle _spinbox_12 widget option -command
    def _spinbox_12_command(self, *args):
        pass

    # _spinbox_12_invalidcommand --
    #
    # Callback to handle _spinbox_12 widget option -invalidcommand
    def _spinbox_12_invalidcommand(self, *args):
        pass

    # _spinbox_12_validatecommand --
    #
    # Callback to handle _spinbox_12 widget option -validatecommand
    def _spinbox_12_validatecommand(self, *args):
        pass

    # _spinbox_12_xscrollcommand --
    #
    # Callback to handle _spinbox_12 widget option -xscrollcommand
    def _spinbox_12_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_12.get(),0,100)
        if  (new_col == -1) == False:
            self._spinbox_12["values"] = new_col
        new_rgb_color = convert_hsv_to_rgb(int(self._spinbox_10.get()), int(self._spinbox_11.get()), int(self._spinbox_12.get()))
        #print new_rgb_color
        self._label_4["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_4["fg"] = contrast_color(self._label_4["bg"])

    # _spinbox_13_command --
    #
    # Callback to handle _spinbox_13 widget option -command
    def _spinbox_13_command(self, *args):
        pass

    # _spinbox_13_invalidcommand --
    #
    # Callback to handle _spinbox_13 widget option -invalidcommand
    def _spinbox_13_invalidcommand(self, *args):
        pass

    # _spinbox_13_validatecommand --
    #
    # Callback to handle _spinbox_13 widget option -validatecommand
    def _spinbox_13_validatecommand(self, *args):
        pass

    # _spinbox_13_xscrollcommand --
    #
    # Callback to handle _spinbox_13 widget option -xscrollcommand
    def _spinbox_13_xscrollcommand(self, *args):
        pass

    # _spinbox_14_command --
    #
    # Callback to handle _spinbox_14 widget option -command
    def _spinbox_14_command(self, *args):
        pass

    # _spinbox_14_invalidcommand --
    #
    # Callback to handle _spinbox_14 widget option -invalidcommand
    def _spinbox_14_invalidcommand(self, *args):
        pass

    # _spinbox_14_validatecommand --
    #
    # Callback to handle _spinbox_14 widget option -validatecommand
    def _spinbox_14_validatecommand(self, *args):
        pass

    # _spinbox_14_xscrollcommand --
    #
    # Callback to handle _spinbox_14 widget option -xscrollcommand
    def _spinbox_14_xscrollcommand(self, *args):
        pass

    # _spinbox_15_command --
    #
    # Callback to handle _spinbox_15 widget option -command
    def _spinbox_15_command(self, *args):
        pass

    # _spinbox_15_invalidcommand --
    #
    # Callback to handle _spinbox_15 widget option -invalidcommand
    def _spinbox_15_invalidcommand(self, *args):
        pass

    # _spinbox_15_validatecommand --
    #
    # Callback to handle _spinbox_15 widget option -validatecommand
    def _spinbox_15_validatecommand(self, *args):
        pass

    # _spinbox_15_xscrollcommand --
    #
    # Callback to handle _spinbox_15 widget option -xscrollcommand
    def _spinbox_15_xscrollcommand(self, *args):
        pass

    # _spinbox_16_command --
    #
    # Callback to handle _spinbox_16 widget option -command
    def _spinbox_16_command(self, *args):
        pass

    # _spinbox_16_invalidcommand --
    #
    # Callback to handle _spinbox_16 widget option -invalidcommand
    def _spinbox_16_invalidcommand(self, *args):
        pass

    # _spinbox_16_validatecommand --
    #
    # Callback to handle _spinbox_16 widget option -validatecommand
    def _spinbox_16_validatecommand(self, *args):
        pass

    # _spinbox_16_xscrollcommand --
    #
    # Callback to handle _spinbox_16 widget option -xscrollcommand
    def _spinbox_16_xscrollcommand(self, *args):
        pass

    # _spinbox_17_command --
    #
    # Callback to handle _spinbox_17 widget option -command
    def _spinbox_17_command(self, *args):
        pass

    # _spinbox_17_invalidcommand --
    #
    # Callback to handle _spinbox_17 widget option -invalidcommand
    def _spinbox_17_invalidcommand(self, *args):
        pass

    # _spinbox_17_validatecommand --
    #
    # Callback to handle _spinbox_17 widget option -validatecommand
    def _spinbox_17_validatecommand(self, *args):
        pass

    # _spinbox_17_xscrollcommand --
    #
    # Callback to handle _spinbox_17 widget option -xscrollcommand
    def _spinbox_17_xscrollcommand(self, *args):
        pass

    # _spinbox_18_command --
    #
    # Callback to handle _spinbox_18 widget option -command
    def _spinbox_18_command(self, *args):
        pass

    # _spinbox_18_invalidcommand --
    #
    # Callback to handle _spinbox_18 widget option -invalidcommand
    def _spinbox_18_invalidcommand(self, *args):
        pass

    # _spinbox_18_validatecommand --
    #
    # Callback to handle _spinbox_18 widget option -validatecommand
    def _spinbox_18_validatecommand(self, *args):
        pass

    # _spinbox_18_xscrollcommand --
    #
    # Callback to handle _spinbox_18 widget option -xscrollcommand
    def _spinbox_18_xscrollcommand(self, *args):
        pass

    # _spinbox_19_command --
    #
    # Callback to handle _spinbox_19 widget option -command
    def _spinbox_19_command(self, *args):
        pass

    # _spinbox_19_invalidcommand --
    #
    # Callback to handle _spinbox_19 widget option -invalidcommand
    def _spinbox_19_invalidcommand(self, *args):
        pass

    # _spinbox_19_validatecommand --
    #
    # Callback to handle _spinbox_19 widget option -validatecommand
    def _spinbox_19_validatecommand(self, *args):
        pass

    # _spinbox_19_xscrollcommand --
    #
    # Callback to handle _spinbox_19 widget option -xscrollcommand
    def _spinbox_19_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_19.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_19["values"] = new_col
        new_rgb_color = convert_cmyk_to_rgb(self._spinbox_19.get(), self._spinbox_20.get(), self._spinbox_21.get(), self._spinbox_22.get())
        #print new_rgb_color
        self._label_14["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_14["fg"] = contrast_color(self._label_14["bg"])

    # _spinbox_20_command --
    #
    # Callback to handle _spinbox_20 widget option -command
    def _spinbox_20_command(self, *args):
        pass

    # _spinbox_20_invalidcommand --
    #
    # Callback to handle _spinbox_20 widget option -invalidcommand
    def _spinbox_20_invalidcommand(self, *args):
        pass

    # _spinbox_20_validatecommand --
    #
    # Callback to handle _spinbox_20 widget option -validatecommand
    def _spinbox_20_validatecommand(self, *args):
        pass

    # _spinbox_20_xscrollcommand --
    #
    # Callback to handle _spinbox_20 widget option -xscrollcommand
    def _spinbox_20_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_20.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_20["values"] = new_col
        new_rgb_color = convert_cmyk_to_rgb(self._spinbox_19.get(), self._spinbox_20.get(), self._spinbox_21.get(), self._spinbox_22.get())
        #print new_rgb_color
        self._label_14["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_14["fg"] = contrast_color(self._label_14["bg"])

    # _spinbox_21_command --
    #
    # Callback to handle _spinbox_21 widget option -command
    def _spinbox_21_command(self, *args):
        pass

    # _spinbox_21_invalidcommand --
    #
    # Callback to handle _spinbox_21 widget option -invalidcommand
    def _spinbox_21_invalidcommand(self, *args):
        pass

    # _spinbox_21_validatecommand --
    #
    # Callback to handle _spinbox_21 widget option -validatecommand
    def _spinbox_21_validatecommand(self, *args):
        pass

    # _spinbox_21_xscrollcommand --
    #
    # Callback to handle _spinbox_21 widget option -xscrollcommand
    def _spinbox_21_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_21.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_21["values"] = new_col
        new_rgb_color = convert_cmyk_to_rgb(self._spinbox_19.get(), self._spinbox_20.get(), self._spinbox_21.get(), self._spinbox_22.get())
        #print new_rgb_color
        self._label_14["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_14["fg"] = contrast_color(self._label_14["bg"])

    # _spinbox_22_command --
    #
    # Callback to handle _spinbox_22 widget option -command
    def _spinbox_22_command(self, *args):
        pass

    # _spinbox_22_invalidcommand --
    #
    # Callback to handle _spinbox_22 widget option -invalidcommand
    def _spinbox_22_invalidcommand(self, *args):
        pass

    # _spinbox_22_validatecommand --
    #
    # Callback to handle _spinbox_22 widget option -validatecommand
    def _spinbox_22_validatecommand(self, *args):
        pass

    # _spinbox_22_xscrollcommand --
    #
    # Callback to handle _spinbox_22 widget option -xscrollcommand
    def _spinbox_22_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_22.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_22["values"] = new_col
        new_rgb_color = convert_cmyk_to_rgb(self._spinbox_19.get(), self._spinbox_20.get(), self._spinbox_21.get(), self._spinbox_22.get())
        #print new_rgb_color
        self._label_14["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_14["fg"] = contrast_color(self._label_14["bg"])

    # _spinbox_23_command --
    #
    # Callback to handle _spinbox_23 widget option -command
    def _spinbox_23_command(self, *args):
        pass

    # _spinbox_23_invalidcommand --
    #
    # Callback to handle _spinbox_23 widget option -invalidcommand
    def _spinbox_23_invalidcommand(self, *args):
        pass

    # _spinbox_23_validatecommand --
    #
    # Callback to handle _spinbox_23 widget option -validatecommand
    def _spinbox_23_validatecommand(self, *args):
        pass

    # _spinbox_23_xscrollcommand --
    #
    # Callback to handle _spinbox_23 widget option -xscrollcommand
    def _spinbox_23_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_23.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_23["values"] = new_col
        new_rgb_color = convert_cmyk_to_rgb(self._spinbox_23.get(), self._spinbox_24.get(), self._spinbox_25.get(), self._spinbox_26.get())
        #print new_rgb_color
        self._label_16["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_16["fg"] = contrast_color(self._label_16["bg"])

    # _spinbox_24_command --
    #
    # Callback to handle _spinbox_24 widget option -command
    def _spinbox_24_command(self, *args):
        pass

    # _spinbox_24_invalidcommand --
    #
    # Callback to handle _spinbox_24 widget option -invalidcommand
    def _spinbox_24_invalidcommand(self, *args):
        pass

    # _spinbox_24_validatecommand --
    #
    # Callback to handle _spinbox_24 widget option -validatecommand
    def _spinbox_24_validatecommand(self, *args):
        pass

    # _spinbox_24_xscrollcommand --
    #
    # Callback to handle _spinbox_24 widget option -xscrollcommand
    def _spinbox_24_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_24.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_24["values"] = new_col
        new_rgb_color = convert_cmyk_to_rgb(self._spinbox_23.get(), self._spinbox_24.get(), self._spinbox_25.get(), self._spinbox_26.get())
        #print new_rgb_color
        self._label_16["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_16["fg"] = contrast_color(self._label_16["bg"])

    # _spinbox_25_command --
    #
    # Callback to handle _spinbox_25 widget option -command
    def _spinbox_25_command(self, *args):
        pass

    # _spinbox_25_invalidcommand --
    #
    # Callback to handle _spinbox_25 widget option -invalidcommand
    def _spinbox_25_invalidcommand(self, *args):
        pass

    # _spinbox_25_validatecommand --
    #
    # Callback to handle _spinbox_25 widget option -validatecommand
    def _spinbox_25_validatecommand(self, *args):
        pass

    # _spinbox_25_xscrollcommand --
    #
    # Callback to handle _spinbox_25 widget option -xscrollcommand
    def _spinbox_25_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_25.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_25["values"] = new_col
        new_rgb_color = convert_cmyk_to_rgb(self._spinbox_23.get(), self._spinbox_24.get(), self._spinbox_25.get(), self._spinbox_26.get())
        #print new_rgb_color
        self._label_16["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_16["fg"] = contrast_color(self._label_16["bg"])

    # _spinbox_26_command --
    #
    # Callback to handle _spinbox_26 widget option -command
    def _spinbox_26_command(self, *args):
        pass

    # _spinbox_26_invalidcommand --
    #
    # Callback to handle _spinbox_26 widget option -invalidcommand
    def _spinbox_26_invalidcommand(self, *args):
        pass

    # _spinbox_26_validatecommand --
    #
    # Callback to handle _spinbox_26 widget option -validatecommand
    def _spinbox_26_validatecommand(self, *args):
        pass

    # _spinbox_26_xscrollcommand --
    #
    # Callback to handle _spinbox_26 widget option -xscrollcommand
    def _spinbox_26_xscrollcommand(self, *args):
        new_col = validate_color_value(self._spinbox_26.get(),0,255)
        if  (new_col == -1) == False:
            self._spinbox_26["values"] = new_col
        new_rgb_color = convert_cmyk_to_rgb(self._spinbox_23.get(), self._spinbox_24.get(), self._spinbox_25.get(), self._spinbox_26.get())
        #print new_rgb_color
        self._label_16["bg"] = rgb_color_to_hex(new_rgb_color[0], new_rgb_color[1], new_rgb_color[2])
        self._label_16["fg"] = contrast_color(self._label_16["bg"])

    # _spinbox_27_command --
    #
    # Callback to handle _spinbox_27 widget option -command
    def _spinbox_27_command(self, *args):
        pass

    # _spinbox_27_invalidcommand --
    #
    # Callback to handle _spinbox_27 widget option -invalidcommand
    def _spinbox_27_invalidcommand(self, *args):
        pass

    # _spinbox_27_validatecommand --
    #
    # Callback to handle _spinbox_27 widget option -validatecommand
    def _spinbox_27_validatecommand(self, *args):
        pass

    # _spinbox_27_xscrollcommand --
    #
    # Callback to handle _spinbox_27 widget option -xscrollcommand
    def _spinbox_27_xscrollcommand(self, *args):
        pass

    # _spinbox_28_command --
    #
    # Callback to handle _spinbox_28 widget option -command
    def _spinbox_28_command(self, *args):
        pass

    # _spinbox_28_invalidcommand --
    #
    # Callback to handle _spinbox_28 widget option -invalidcommand
    def _spinbox_28_invalidcommand(self, *args):
        pass

    # _spinbox_28_validatecommand --
    #
    # Callback to handle _spinbox_28 widget option -validatecommand
    def _spinbox_28_validatecommand(self, *args):
        pass

    # _spinbox_28_xscrollcommand --
    #
    # Callback to handle _spinbox_28 widget option -xscrollcommand
    def _spinbox_28_xscrollcommand(self, *args):
        pass

    # _spinbox_29_command --
    #
    # Callback to handle _spinbox_29 widget option -command
    def _spinbox_29_command(self, *args):
        pass

    # _spinbox_29_invalidcommand --
    #
    # Callback to handle _spinbox_29 widget option -invalidcommand
    def _spinbox_29_invalidcommand(self, *args):
        pass

    # _spinbox_29_validatecommand --
    #
    # Callback to handle _spinbox_29 widget option -validatecommand
    def _spinbox_29_validatecommand(self, *args):
        pass

    # _spinbox_29_xscrollcommand --
    #
    # Callback to handle _spinbox_29 widget option -xscrollcommand
    def _spinbox_29_xscrollcommand(self, *args):
        pass

    # _spinbox_30_command --
    #
    # Callback to handle _spinbox_30 widget option -command
    def _spinbox_30_command(self, *args):
        pass

    # _spinbox_30_invalidcommand --
    #
    # Callback to handle _spinbox_30 widget option -invalidcommand
    def _spinbox_30_invalidcommand(self, *args):
        pass

    # _spinbox_30_validatecommand --
    #
    # Callback to handle _spinbox_30 widget option -validatecommand
    def _spinbox_30_validatecommand(self, *args):
        pass

    # _spinbox_30_xscrollcommand --
    #
    # Callback to handle _spinbox_30 widget option -xscrollcommand
    def _spinbox_30_xscrollcommand(self, *args):
        pass

    # _spinbox_31_command --
    #
    # Legacy command found in callback code. Add user comments inside body.
    def _spinbox_31_command(self, *args):
        pass

    # _spinbox_31_invalidcommand --
    #
    # Legacy command found in callback code. Add user comments inside body.
    def _spinbox_31_invalidcommand(self, *args):
        pass

    # _spinbox_31_validatecommand --
    #
    # Legacy command found in callback code. Add user comments inside body.
    def _spinbox_31_validatecommand(self, *args):
        pass

    # _spinbox_31_xscrollcommand --
    #
    # Legacy command found in callback code. Add user comments inside body.
    def _spinbox_31_xscrollcommand(self, *args):
        pass

    # END CALLBACK CODE

    # BEGIN USER CODE class

    # END USER CODE class
